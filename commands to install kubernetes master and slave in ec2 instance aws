Create AWS account 
#master installation on aws ec2
launch 1 instance name as master-k8's 
before that donot forget to create security group 
name security group as k8-sg
  add inbound rules 
NOTE :
we can have same security group for both master and slave  

Inbound Rules
Type	Protocol	Port Range	Source	Description
SSH	TCP	22	              0.0.0.0/0	
Custom TCP	TCP	 6443	    0.0.0.0/0	
All traffic	All	All	      0.0.0.0/0	
Custom TCP	TCP	10250    	0.0.0.0/0	
Custom TCP	TCP	10259   	0.0.0.0/0	
Custom UDP	UDP	8472	    0.0.0.0/0	
Custom TCP	TCP	2379	    0.0.0.0/0	
Custom TCP	TCP	10257	    0.0.0.0/0	
Custom TCP	TCP	30080	    0.0.0.0/0

dont change the outbound rule 

-->Now go to launch instance --> AMI machine should be ubuntu 22 or 24 version 
-->instance type should be t3.medium or t2.medium 
-->add created security group k8-sg
-->make sure to add keypair 
NOTE: master and slave should have different key pair 
add volume storage as 20Gb 
  and launch instance --> now click on connect 
and enter the mentioned commands to install k8 on master node 

  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#commands to install kubernetes master in ec2 instance aws 

==installation of kubernetes master
--master commands
sudo su
sudo swapoff -a
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system
lsmod | grep br_netfilter
lsmod | grep overlay
sudo apt-get update
sudo apt-get install -y ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install -y containerd.io

containerd config default | sed -e 's/SystemdCgroup = false/SystemdCgroup = true/' -e 's/sandbox_image = "registry.k8s.io\/pause:3.6"/sandbox_image = "registry.k8s.io\/pause:3.9"/' | sudo tee /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl status containerd
Install Kubernetes Components:

sudo apt-get update 
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo kubeadm init
mkdir -p "$HOME"/.kube
sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml
kubeadm token create --print-join-command


#NOTE THAT IF You are getting error 
than 
if you are getting error then write this one in place of sudo kubeadm init 
sudo kubeadm init --ignore-preflight-errors=Mem

***************************************

okay now we are done with master 
now installing slave on another instance

launch 1 instance name as slave-k8's 
before that donot forget to create security group 
name security group as k8-sg
  add inbound rules 
NOTE :
we can have same security group for both master and slave  

Inbound Rules
Type	Protocol	Port Range	Source	Description
SSH	TCP	22	              0.0.0.0/0	
Custom TCP	TCP	 6443	    0.0.0.0/0	
All traffic	All	All	      0.0.0.0/0	
Custom TCP	TCP	10250    	0.0.0.0/0	
Custom TCP	TCP	10259   	0.0.0.0/0	
Custom UDP	UDP	8472	    0.0.0.0/0	
Custom TCP	TCP	2379	    0.0.0.0/0	
Custom TCP	TCP	10257	    0.0.0.0/0	
Custom TCP	TCP	30080	    0.0.0.0/0

dont change the outbound rule 

-->Now go to launch instance --> AMI machine should be ubuntu 22 or 24 version 
-->instance type should be t3.medium or t2.medium 
-->add created security group k8-sg
-->make sure to add keypair 
NOTE: master and slave should have different key pair 
add volume storage as 20Gb 
  and launch instance --> now click on connect 
and enter the mentioned commands to install k8 on worker  node 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#commands to install kubernetes slave in ec2 instance aws 
sudo su
sudo swapoff -a
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system
lsmod | grep br_netfilter
lsmod | grep overlay
sudo apt-get update
sudo apt-get install -y ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update
sudo apt-get install -y containerd.io

containerd config default | sed -e 's/SystemdCgroup = false/SystemdCgroup = true/' -e 's/sandbox_image = "registry.k8s.io\/pause:3.6"/sandbox_image = "registry.k8s.io\/pause:3.9"/' | sudo tee /etc/containerd/config.toml

sudo systemctl restart containerd
sudo systemctl status containerd

sudo apt-get update 
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo kubeadm reset pre-flight checks


------------------------------------------------------------------------------------------------------------
Now joining k8 master with k8 slave 
you will get a key on master node copy that 
go to slave node and 
enter sudo <key which is copied from the master >
it will connect 
go to master 
type command as
kubectl get nodes

Now both master and slave nodes are ready 


We are creating the k8's environment to setup manually for practice

Thank you I hope you have got all neccessity steps 
